<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="Face Reco." id="1" localization="8" tooltip="Detect people&apos;s face and recognize those which are known by the robot.&#x0A;&#x0A;Note: the robot needs to learn a face with the Learn Face box before he can recognize it." x="218" y="25">
                            <bitmap>media/images/box/interaction/reco_face.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="FaceDetected" type="0" type_size="1" nature="4" stm_value_name="FaceDetected" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="5" />
                            <Output name="onRecognizedFaces" type="3" type_size="1" nature="2" inner="0" tooltip="Names of recognized faces. If several faces are recognized, they are sent one&#x0A;after an other on this output." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Reco. Det. Faces" id="1" localization="8" tooltip="Process face detection extractor data (FaceDetected) to extract the labels of&#x0A;recognized faces and notify when there is a face detected but not recognized.&#x0A;&#x0A;An output (either one or the other) is stimulated each time the number of&#x0A;recognized faces change." x="183" y="68">
                                                <bitmap>media/images/box/interaction/reco_face.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.timeFilteredResult = [];

    def onUnload(self):
        #puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(len(p) > 0):
            if(len(p[1]) > 0): # just in case of the ALValue is in the wrong format
                # get the ALValue returned by the time filtered recognition:
                #    - [] when nothing new.
                #    - [4] when a face has been detected but not recognized during the first 8s.
                #    - [2, [faceName]] when one face has been recognized.
                #    - [3, [faceName1, faceName2, ...]] when several faces have been recognized.
                self.timeFilteredResult = p[1][len(p[1]) -1]
                if( len(self.timeFilteredResult) == 1 ):
                    # If a face has been detected for more than 8s but not recognized
                    if(self.timeFilteredResult[0] == 4):
                        self.onDetectWithoutReco()
                elif( len(self.timeFilteredResult) == 2 ):
                    # If one or several faces have been recognized
                    if(self.timeFilteredResult[0] in [2, 3]):
                        for s in self.timeFilteredResult[1]:
                            self.onRecognizedFace( s )

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input. It must be the&#x0A;FaceDetected extractor data." id="2" />
                                                <Output name="onRecognizedFace" type="3" type_size="1" nature="1" inner="0" tooltip="Name of recognized face. If several faces are recognized, they are sent one after an&#x0A;other on this output.&#x0A;&#x0A;Note: if it is the wrong face which has been recognized, you have 7s to rename&#x0A;it with the relearn function available on one of  Add/Del Faces sub-boxes (Learn Face&#x0A;box)." id="3" />
                                                <Output name="onDetectWithoutReco" type="1" type_size="1" nature="1" inner="0" tooltip="A face has been detected for more than 8s but has not been recognized. It means&#x0A;that the robot does not know this face but it would be a good idea to learn it." id="4" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Employee Messages" id="2" localization="8" tooltip="" x="384" y="17">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Get Employee Data" id="11" localization="8" tooltip="Get the employee data from the database." x="89" y="152">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# IN:  NONE
# OUT: location object list

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        import os
        import sys
        behaviorPath = self.session().service("ALFrameManager").getBehaviorPath(self.behaviorId)
        self.path = os.path.join(behaviorPath, '../lib')
        if self.path not in sys.path:
            sys.path.insert(0, self.path)

    def onUnload(self):
        #put clean-up code here
        if self.path in sys.path:
            sys.path.remove(self.path)

    def onInput_onStart(self):
        from tinydb import TinyDB
        import json
        db = TinyDB(self.getParameter('Database Path'))
        employees = db.table('employees')
        employee_data = employees.all()
        self.logger.info(employee_data)
        if employee_data:
          self.employee_data(json.dumps(employee_data)) #activate the output of the box
        else:
          self.onError('Error retrieving employee data')

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="employee_data" type="3" type_size="1" nature="2" inner="0" tooltip="The employee data as a JSON string." id="3" />
                                                <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="Database Path" inherits_from_parent="0" content_type="3" value="/home/nao/airport/db/database.json" default_value="/home/nao/airport/db/database.json" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="Get Unheard Messages" id="2" localization="8" tooltip="Gets the list of the unheard recorded messages for the given employee." x="82" y="31">
                                                <bitmap>media/images/box/interaction/rec_sound.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# IN:  NONE
# OUT: location object list

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        import os
        import sys
        behaviorPath = self.session().service("ALFrameManager").getBehaviorPath(self.behaviorId)
        self.path = os.path.join(behaviorPath, '../lib')
        if self.path not in sys.path:
            sys.path.insert(0, self.path)

    def onUnload(self):
        #put clean-up code here
        if self.path in sys.path:
            sys.path.remove(self.path)

    def onInput_employee_name(self, employee_name):
        from tinydb import TinyDB, Query
        import json
        db = TinyDB(self.getParameter('Database Path'))
        employees = db.table('employees')
        Employee = Query()
        employee_data = employees.get(Employee.name == employee_name)
        unheard_messages = [str(x['file_path']) for x in employee_data['messages'] if not x['listened']]
        self.logger.info(unheard_messages)
        if employee_data:
            self.messages(unheard_messages)
        else:
            self.onError('Employee with name %s was not found' % self.employee_name)


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="employee_name" type="3" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                <Output name="messages" type="0" type_size="1" nature="2" inner="0" tooltip="List of the file paths of their recorded messages." id="3" />
                                                <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="Database Path" inherits_from_parent="0" content_type="3" value="/home/nao/airport/db/database.json" default_value="/home/nao/airport/db/database.json" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="Mark Message Heard" id="1" localization="8" tooltip="Updates the database to flag that the message has been heard." x="820" y="126">
                                                <bitmap>media/images/box/interaction/rec_sound.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# IN:  NONE
# OUT: location object list

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.employee_name = ''
        self.file_path = ''
        self.gotName = False
        self.gotFilePath = False

    def onLoad(self):
        #put initialization code here
        import os
        import sys
        behaviorPath = self.session().service("ALFrameManager").getBehaviorPath(self.behaviorId)
        self.path = os.path.join(behaviorPath, '../lib')
        if self.path not in sys.path:
            sys.path.insert(0, self.path)

    def onUnload(self):
        #put clean-up code here
        if self.path in sys.path:
            sys.path.remove(self.path)

    def onInput_message_file_path(self, message_file_path):
        self.file_path = message_file_path
        self.gotFilePath = True
        self.save()

    def onInput_employee_name(self, employee_name):
        self.employee_name = employee_name
        self.gotName = True
        self.save()

    def save(self):
        from tinydb import TinyDB, Query
        import json
        db = TinyDB(self.getParameter('Database Path'))
        employees = db.table('employees')
        Employee = Query()
        if self.gotFilePath and self.gotName:
            employee_data = employees.get(Employee.name == self.employee_name)
            if employee_data:
                messages = employee_data['messages']
                i = next((i for (i, d) in enumerate(messages) if d['file_path'] == self.file_path), None)
                messages[i]['listened'] = True
                self.logger.info(employee_data)
                employees.update(employee_data, Employee.name == self.employee_name)
                self.gotFilePath = False
                self.gotName = False
                self.OK()
            else:
                self.onError('Employee with name %s was not found' % self.employee_name)


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="message_file_path" type="3" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                <Input name="employee_name" type="3" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Output name="OK" type="1" type_size="1" nature="2" inner="0" tooltip="The data has been saved." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Parameter name="Database Path" inherits_from_parent="0" content_type="3" value="/home/nao/airport/db/database.json" default_value="/home/nao/airport/db/database.json" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Record Message" id="3" localization="8" tooltip='Record a sound on the robot. You can choose to record only with one&#x0A;microphone (the front head microphone) in ogg format, or with four microphones&#x0A;(front, sides and rear head microphones) in wav format.&#x0A;&#x0A;If &quot;Temporary storage&quot; isn&apos;t checked, the output sound file is located in &quot;~/recordings/microphones/&lt;File name&gt;&quot;.&#x0A;Else, it is located in a temporary directory&#x0A;&#x0A;The onStopped output is stimulated at the end of the recording and contains the absolute path to the output sound file&#x0A;&#x0A;V1.1.0&#x0A;' x="613" y="226">
                                                <bitmap>media/images/box/interaction/rec_sound.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Launches the recording of the message.&#x0A;&#x0A;The string input is the name of the recipient." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the recording of the sound." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Returns the absolute path of the output sound file at the end of the recording" id="4" />
                                                <Output name="name" type="3" type_size="1" nature="2" inner="0" tooltip="The pass through of the name of the message recipient." id="5" />
                                                <Parameter name="file_path" inherits_from_parent="0" content_type="3" value="/home/nao/airport/messages" default_value="/home/nao/airport/messages" custom_choice="0" tooltip="Name of the destination file without its extension." id="6" />
                                                <Parameter name="Microphones used" inherits_from_parent="0" content_type="3" value="Front, sides and rear head microphones (.wav)" default_value="Front, sides and rear head microphones (.wav)" custom_choice="0" tooltip="Microphones used to record the sound.&#x0A;&#x0A;Note: If you use only the front head microphone the file will be saved in ogg format. If you use the&#x0A;front, sides and rear head microphones it will be saved in wav format." id="7">
                                                    <Choice value="Front head microphone only (.ogg)" />
                                                    <Choice value="Front, sides and rear head microphones (.wav)" />
                                                </Parameter>
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="5" min="0.1" max="60" tooltip="Duration of the recording in seconds." id="8" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Rec. Sound File" id="4" localization="8" tooltip="Record a sound on the robot. You can choose to record only with one&#x0A;microphone (the front head microphone) in ogg format, or with four microphones&#x0A;(front, sides and rear head&#x0A;microphones) in wav format." x="562" y="100">
                                                                    <bitmap>media/images/box/interaction/rec_sound.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        try:
            self.ad = ALProxy("ALAudioDevice")
        except Exception as e:
            self.ad = None
            self.logger.error(e)
        self.filepath = ""

    def onLoad(self):
        self.bIsRecording = False
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False
        if( self.bIsRecording ):
            self.ad.stopMicrophonesRecording()
            self.bIsRecording = False

    def onInput_onStart(self, p):
        if(self.bIsRunning):
            return
        self.bIsRunning = True
        sExtension = self.toExtension( self.getParameter("Microphones used") )
        self.filepath = p + sExtension
        if self.ad:
            self.ad.startMicrophonesRecording( self.filepath )
            self.bIsRecording = True
        else:
            self.logger.warning("No sound recorded")

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped(self.filepath)

    def toExtension(self, sMicrophones):
        if( sMicrophones == "Front head microphone only (.ogg)" ):
            return ".ogg"
        else:
            return ".wav"]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Launches the recording of the sound. The data received on this input must be the&#x0A;filename of the sound." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the recording of the sound." id="3" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Returns the absolute path of the output sound file at the end of the recording" id="4" />
                                                                    <Parameter name="Microphones used" inherits_from_parent="1" content_type="3" value="Front, sides and rear head microphones (.wav)" default_value="Front, sides and rear head microphones (.wav)" custom_choice="0" tooltip="Microphones used to record the sound.&#x0A;&#x0A;Note: If you use only the front head microphone the file will be saved in ogg format. If you use the&#x0A;front, sides and rear head microphones it will be saved in wav format." id="5">
                                                                        <Choice value="Front head microphone only (.ogg)" />
                                                                        <Choice value="Front, sides and rear head microphones (.wav)" />
                                                                    </Parameter>
                                                                </Box>
                                                                <Box name="Wait" id="13" localization="8" tooltip="Wait a moment before sending a bang on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start over." x="420" y="161">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="1" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                </Box>
                                                                <Box name="Get File Name" id="10" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="234" y="95">
                                                                    <bitmap>media/images/box/folder.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import os
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.framemanager = ALProxy("ALFrameManager")

    def onInput_onStart(self, name):
        from datetime import datetime
        now = datetime.now().strftime('%Y-%m-%d_%H:%M:%S_%f')
        self.onStopped( '%s/%s-%s' % (self.getParameter("file_path"), name, now))]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                                                    <Parameter name="file_path" inherits_from_parent="1" content_type="3" value="recording" default_value="" custom_choice="0" tooltip="Name of the file." id="4" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="4" indexofinput="3" outputowner="13" indexofoutput="4" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="13" indexofinput="2" outputowner="10" indexofoutput="3" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="10" indexofoutput="3" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="0" indexofoutput="2" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                                <Resource name="Audio recorder" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="Play Message" id="4" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="816" y="18">
                                                <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="The file path of the audio message" id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                                                <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                                                <Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                                                <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70">
                                                                    <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.player = ALProxy('ALAudioPlayer')
        self.playerStop = ALProxy('ALAudioPlayer', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.post.playFileInLoop(p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.post.playFileFromPosition(p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                                                                    <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                                                                    <Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                                                                    <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                                <Resource name="Audio player" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="Save Recorded Message Data" id="5" localization="8" tooltip="Saves details of the recorded message to the database." x="1110" y="105">
                                                <bitmap>media/images/box/interaction/rec_sound.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# IN:  NONE
# OUT: location object list

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.employee_name = ''
        self.file_path = ''
        self.gotName = False
        self.gotFilePath = False

    def onLoad(self):
        #put initialization code here
        import os
        import sys
        behaviorPath = self.session().service("ALFrameManager").getBehaviorPath(self.behaviorId)
        self.path = os.path.join(behaviorPath, '../lib')
        if self.path not in sys.path:
            sys.path.insert(0, self.path)

    def onUnload(self):
        #put clean-up code here
        if self.path in sys.path:
            sys.path.remove(self.path)

    def onInput_message_file_path(self, message_file_path):
        self.file_path = message_file_path
        self.gotFilePath = True
        self.save()

    def onInput_employee_name(self, employee_name):
        self.employee_name = employee_name
        self.gotName = True
        self.save()

    def save(self):
        from tinydb import TinyDB, Query
        import json
        db = TinyDB(self.getParameter('Database Path'))
        employees = db.table('employees')
        Employee = Query()
        if self.gotFilePath and self.gotName:
            employee_data = employees.get(Employee.name == self.employee_name)
            if employee_data:
                employee_data['messages'].append({'file_path': self.file_path, 'listened': False})
                self.logger.info(employee_data)
                employees.update(employee_data, Employee.name == self.employee_name)
                self.gotFilePath = False
                self.gotName = False
                self.OK()
            else:
                self.onError('Employee with name %s was not found' % self.employee_name)


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="message_file_path" type="3" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                <Input name="employee_name" type="3" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Output name="OK" type="1" type_size="1" nature="2" inner="0" tooltip="The data has been saved." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Parameter name="Database Path" inherits_from_parent="0" content_type="3" value="/home/nao/airport/db/database.json" default_value="/home/nao/airport/db/database.json" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="List Size" id="12" localization="8" tooltip="Gets the size of the given list." x="434" y="16">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_list(self, p):
        self.size(len(p)) #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="list" type="0" type_size="1" nature="1" inner="0" tooltip="The list" id="2" />
                                                <Output name="size" type="2" type_size="1" nature="2" inner="0" tooltip="The size of the list" id="3" />
                                            </Box>
                                            <Box name="String Loop" id="6" localization="-1" tooltip='Given a list of strings this will output one string of the list at a time.&#x0A;&#x0A;You need to use the &quot;next&quot; input to output the next value in the list.' x="583" y="77">
                                                <bitmap>media/images/box/loop.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.index = 0
        self.list = []

    def onLoad(self):
        self.index = 0
        self.list = []

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_list(self, the_list):
        self.list = the_list
        self.next_string(self.list[0])
        self.index += 1

    def onInput_next(self):
        if self.index < len(self.list):

            self.next_string(self.list[self.index])
            self.index += 1
        else:
            self.finished()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="list" type="0" type_size="1" nature="1" inner="0" tooltip="The list of strings" id="2" />
                                                <Input name="next" type="1" type_size="1" nature="1" inner="0" tooltip="Trigger to get the next value in the list." id="3" />
                                                <Output name="next_string" type="3" type_size="1" nature="2" inner="0" tooltip="The next string in the list." id="4" />
                                                <Output name="finished" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over." id="5" />
                                            </Box>
                                            <Box name="Get Employee Names" id="7" localization="8" tooltip="Get a list of all the employee names. List is a semi-colon separated string.&#x0A;&#x0A;It could be used to feed into a speech reco box." x="324" y="178">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# IN:  flight object list (json)
# OUT: destination list

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_employee_data(self, employee_json):
        import json
        # code here to get list of destinations from flight data json
        employee_data = json.loads(employee_json)
        names = [x['name'] for x in employee_data]
        self.employee_names(json.dumps(';'.join(names)))

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="employee_data" type="3" type_size="1" nature="1" inner="0" tooltip="The employee data as a JSON string." id="2" />
                                                <Output name="employee_names" type="3" type_size="1" nature="2" inner="0" tooltip="The employee names as a semi-colon separated string." id="3" />
                                            </Box>
                                            <Box name="Log Output" id="9" localization="8" tooltip="" x="848" y="383">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="INFO" type="0" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                <Input name="ERROR" type="3" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Wait For Signals" id="8" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="971" y="37">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                            </Box>
                                            <Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="9" indexofinput="3" outputowner="11" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="9" indexofinput="3" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="12" indexofinput="2" outputowner="2" indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="3" />
                                            <Link inputowner="8" indexofinput="2" outputowner="4" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="3" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="3" outputowner="8" indexofoutput="4" />
                                            <Link inputowner="9" indexofinput="3" outputowner="1" indexofoutput="5" />
                                            <Link inputowner="7" indexofinput="2" outputowner="11" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Directions" id="3" localization="8" tooltip="" x="231" y="141">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Get Directions" id="12" localization="8" tooltip="Get a list of direction descriptions for the given airport location." x="323" y="147">
                                                <bitmap>media/images/box/movement/turn_around.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# IN:  location_id
# OUT: direction description

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.location_data = ''
        self.location_name = ''
        self.gotLocationData = False
        self.gotLocationName = False

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_location_data(self, location_json):
        import json
        self.location_data = json.loads(location_json)
        self.gotLocationData = True
        self.get_directions()

    def onInput_location_name(self, location_name):
        self.location_name = location_name
        self.gotLocationName = True
        self.get_directions()

    def get_directions(self):
        if self.gotLocationData and self.gotLocationName:
            location_data = [x for x in self.location_data if x['name'] == self.location_name]
            if not location_data:
                self.not_found('%s could not be found' % self.location_name)
            else:
                directions = str(location_data[0]['directions'])
                self.gotLocationData = False
                self.gotLocationName = False
                self.onDirections(directions)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="location_data" type="3" type_size="1" nature="1" inner="0" tooltip="The locations data as a JSON string" id="2" />
                                                <Input name="location_name" type="3" type_size="1" nature="1" inner="0" tooltip="The name os the location to get directions&#x0A;*CASE SENSITIVE*" id="3" />
                                                <Output name="onDirections" type="0" type_size="1" nature="2" inner="0" tooltip="A list of direction instructions" id="4" />
                                                <Output name="not_found" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="Get Locations" id="11" localization="8" tooltip="Get the locations around the airport from the database" x="548" y="352">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# IN:  NONE
# OUT: location object list

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        import os
        import sys
        behaviorPath = self.session().service("ALFrameManager").getBehaviorPath(self.behaviorId)
        self.path = os.path.join(behaviorPath, '../lib')
        if self.path not in sys.path:
            sys.path.insert(0, self.path)

    def onUnload(self):
        #put clean-up code here
        if self.path in sys.path:
            sys.path.remove(self.path)

    def onInput_onStart(self):
        from tinydb import TinyDB
        import json
        db = TinyDB(self.getParameter('Database Path'))
        locations = db.table('locations')
        locations_data = locations.all()
        self.logger.info(locations_data)
        if locations_data:
          self.onLocations(json.dumps(locations_data)) #activate the output of the box
        else:
          self.onError('Error retrieving locations data')

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onLocations" type="3" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="Database Path" inherits_from_parent="0" content_type="3" value="/home/nao/airport/db/database.json" default_value="/home/nao/airport/db/database.json" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="Get Flights" id="1" localization="8" tooltip="Get the flight data from the database" x="617" y="203">
                                                <bitmap>media/images/box/sensors/ultrasound.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# IN:  NONE
# OUT: flight object list (json)

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        import os
        import sys
        behaviorPath = self.session().service("ALFrameManager").getBehaviorPath(self.behaviorId)
        self.path = os.path.join(behaviorPath, '../lib')
        if self.path not in sys.path:
            sys.path.insert(0, self.path)

    def onUnload(self):
        #put clean-up code here
        if self.path in sys.path:
            sys.path.remove(self.path)

    def onInput_onStart(self):
        from tinydb import TinyDB
        import json
        db = TinyDB(self.getParameter('Database Path'))
        flights = db.table('flights')
        flight_data = flights.all()
        self.logger.info(flight_data)
        if flight_data:
            self.onFlights(json.dumps(flight_data)) #activate the output of the box
        else:
            self.onError('Error retrieving flight data')

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onFlights" type="3" type_size="1" nature="2" inner="0" tooltip="The flight data in a JSON string." id="3" />
                                                <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="Database Path" inherits_from_parent="0" content_type="3" value="/home/nao/airport/db/database.json" default_value="/home/nao/airport/db/database.json" custom_choice="0" tooltip="The location of the database" id="5" />
                                            </Box>
                                            <Box name="Get Departure Gate" id="10" localization="8" tooltip="Get the departure gate for the flight going to the given destination." x="388" y="335">
                                                <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# IN:  flight_data, destination
# OUT: departure_gate

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.flight_data = ''
        self.destination = ''
        self.gotFlightData = False
        self.gotDestination = False

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_flight_data(self, flight_json):
        import json
        self.flight_data = json.loads(flight_json)
        self.gotFlightData = True
        self.get_departure_gate()

    def onInput_destination(self, destination):
        self.destination = destination
        self.gotDestination = True
        self.get_departure_gate()

    def get_departure_gate(self):
        if self.gotFlightData and self.gotDestination:
            destination_data = [x for x in self.flight_data if x['destination'] == self.destination]
            if not destination_data:
                self.not_found('Destination %s could not be found' % self.destination)
            else:
                departure_gate = str(destination_data[0]['gate'])
                self.gotFlightData = False
                self.gotDestination = False
                self.onDepartureGate(departure_gate)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="flight_data" type="3" type_size="1" nature="1" inner="0" tooltip="The flight data as a JSON string." id="2" />
                                                <Input name="destination" type="3" type_size="1" nature="1" inner="0" tooltip="The destination" id="3" />
                                                <Output name="onDepartureGate" type="3" type_size="1" nature="2" inner="0" tooltip="The departure gate for the given destination." id="4" />
                                                <Output name="not_found" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                            </Box>
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Check In" id="4" localization="8" tooltip="" x="391" y="144">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Check In" id="8" localization="8" tooltip="Checks in the user for the given ticket." x="261" y="116">
                                                <bitmap>media/images/box/shortcut.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.ticket_data = ''
        self.boardingPassNaoMarkId = -1
        self.gotTicketData = False
        self.gotBoardingPassNaoMarkId = False

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_ticket_data(self, ticket_json):
        import json
        self.ticket_data = json.loads(ticket_json)
        self.gotTicketData = True
        self.check_in()

    def onInput_boardingPassNaoMarkId(self, boardingPassNaoMarkId):
        self.boardingPassNaoMarkId = boardingPassNaoMarkId
        self.gotBoardingPassNaoMarkId = True
        self.check_in()

    def check_in(self):
        from tinydb import TinyDB, Query
        import json
        db = TinyDB(self.getParameter('Database Path'))
        users = db.table('users')
        flights = db.table('flights')
        boarding_passes = db.table('boarding_passes')
        if self.gotTicketData and self.gotBoardingPassNaoMarkId:
            try:
                Flight = Query()
                flight_data = flights.get(doc_id=self.ticket_data['flight_id'])
                self.check_cutoff(str(flight_data['checkin_cutoff']))

                User = Query()
                user = users.get(User.nao_mark_id == self.ticket_data['user_id'])
                self.check_security(user['security_flag'])

                self.is_checked_in(self.ticket_data['user_id'], flight_data['passengers'])

                flight_data['passengers'].append(self.ticket_data['user_id'])
                flights.update(flight_data, Flight.destination == flight_data['destination'])
                self.gotTicketData = False
                self.gotBoardingPassNaoMarkId = False
                boarding_pass_data = {
                    'user_id': int(user['nao_mark_id']),
                    'flight_id': flight_data.doc_id,
                    'nao_mark_id': self.boardingPassNaoMarkId,
                    'destination': flight_data['destination'],
                    'departure': flight_data['departure'],
                    'gate': flight_data['gate']
                }
                boarding_pass_id = boarding_passes.insert(boarding_pass_data)
                self.onCheckin(json.dumps(boarding_pass_data))
            except Exception as e:
                self.deallocateNaoMark(db, self.boardingPassNaoMarkId)
                self.onError('Check in failed. %s' % e)

    def is_checked_in(self, user_id, flight_passengers):
        if user_id in flight_passengers:
            self.checked_in()
            raise(Exception('User already checked in'))

    def check_cutoff(self, cutoff_time):
        from datetime import datetime
        now = datetime.now()
        now_s = now.strftime('%H:%M')
        if now_s > cutoff_time:
            self.missed_cutoff()
            raise(Exception('Check in after cutoff time of %s' % cutoff_time))

    def check_security(self, security_flag):
        if security_flag in ['YELLOW','RED']:
            self.security_risk(str(security_flag))
            raise(Exception('Security check failed! [%s]' % security_flag))

    def deallocateNaoMark(self, db, naoMarkId):
        from tinydb import Query
        nao_marks = db.table('nao_marks')
        NaoMark = Query()
        nao_mark = nao_marks.get(NaoMark.id == naoMarkId)
        nao_mark['allocated'] = False
        nao_marks.update(nao_mark, NaoMark.id == nao_mark['id'])]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="ticket_data" type="3" type_size="1" nature="1" inner="0" tooltip="The ticket data as a JSON string." id="2" />
                                                <Input name="boardingPassNaoMarkId" type="2" type_size="1" nature="1" inner="0" tooltip="The ID of the next available nao mark for tickets.&#x0A;&#x0A;* USE Get Next Nao Mark box *" id="3" />
                                                <Output name="onCheckin" type="3" type_size="1" nature="2" inner="0" tooltip="The boarding pass data as a JSON string. Use it to create a boarding pass." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Output name="checked_in" type="1" type_size="1" nature="2" inner="0" tooltip="User already checked in" id="6" />
                                                <Output name="missed_cutoff" type="1" type_size="1" nature="2" inner="0" tooltip="User missed checkin cutoff time" id="7" />
                                                <Output name="security_risk" type="3" type_size="1" nature="2" inner="0" tooltip="User failed security check. Security level is output." id="8" />
                                                <Parameter name="Database Path" inherits_from_parent="0" content_type="3" value="/home/nao/airport/db/database.json" default_value="/home/nao/airport/db/database.json" custom_choice="0" tooltip="" id="9" />
                                            </Box>
                                            <Box name="Create Boarding Pass" id="2" localization="8" tooltip="Generates a boarding pass which results in an image and saves it in the boarding pass file location. This can be used to attach in an email." x="435" y="310">
                                                <bitmap>media/images/box/box-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        import os
        import sys
        behaviorPath = self.session().service("ALFrameManager").getBehaviorPath(self.behaviorId)
        self.path = os.path.join(behaviorPath, '../lib')
        if self.path not in sys.path:
            sys.path.insert(0, self.path)

    def onUnload(self):
        #put clean-up code here
        if self.path in sys.path:
            sys.path.remove(self.path)

    def onInput_boarding_pass_data(self, boarding_pass_json):
        from tinydb import TinyDB, Query
        import requests
        import json
#        import os
#        os.environ['no_proxy'] = '127.0.0.1,localhost'
        boarding_pass_data = json.loads(boarding_pass_json)

        if 'boarding_pass_file' in boarding_pass_data:
            self.onError('boarding_pass already created for boarding_pass id %s' % boarding_pass_data['nao_mark_id'])
            self.boarding_pass_data_out(boarding_pass_json)
            return

        db = TinyDB(self.getParameter('Database Path'))
        boarding_passes = db.table('boarding_passes')
        boarding_pass = Query()
        users = db.table('users')
        User = Query()
        user_data = users.get(User.nao_mark_id == boarding_pass_data['user_id'])

        new_boarding_pass_data = {
            'name': '%s %s' % (user_data['first_name'], user_data['last_name']),
            'nao_mark_id': boarding_pass_data['nao_mark_id'],
            'destination': boarding_pass_data['destination'],
            'departure': boarding_pass_data['departure'],
            'seat': self.get_seat(),
            'boarding': self.get_boarding(boarding_pass_data['departure']),
            'terminal': 'T1',
            'gate': boarding_pass_data['gate']
        }
        r = requests.post('%s/create_boarding_pass' % self.getParameter('Airport API Base URI'), json=new_boarding_pass_data)
        if r.status_code == requests.codes.ok:
            new_boarding_pass_data = json.loads(r.text)
            boarding_pass_data['boarding_pass_file'] = new_boarding_pass_data['boarding_pass_file']
            boarding_pass_data['seat'] = new_boarding_pass_data['seat']
            boarding_pass_data['boarding'] = new_boarding_pass_data['boarding']
            boarding_passes.update(boarding_pass_data, boarding_pass.nao_mark_id == boarding_pass_data['nao_mark_id'])
            self.boarding_pass_data_out(json.dumps(boarding_pass_data))
        else:
            self.onError('Create boarding pass API call returned: %s' % r.status_code)

    def get_seat(self):
        import random
        positions = 'ABCDEF'
        position = random.choice(positions)
        row = random.randint(1,25)
        return '%d%s' % (row, position)

    def get_boarding(self, departure):
        from datetime import datetime, timedelta
        dep = datetime.strptime(departure, '%H:%M')
        boarding = dep - timedelta(hours=0, minutes=20)
        return boarding.strftime('%H:%M')]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="boarding_pass_data" type="3" type_size="1" nature="1" inner="0" tooltip="The boarding pass data as a JSON string." id="2" />
                                                <Output name="boarding_pass_data_out" type="3" type_size="1" nature="2" inner="0" tooltip="The boarding pass data as a JSON string." id="3" />
                                                <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="Database Path" inherits_from_parent="0" content_type="3" value="/home/nao/airport/db/database.json" default_value="/home/nao/airport/db/database.json" custom_choice="0" tooltip="" id="5" />
                                                <Parameter name="Airport API Base URI" inherits_from_parent="0" content_type="3" value="http://coreydxc.pythonanywhere.com" default_value="http://coreydxc.pythonanywhere.com" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Get Boarding Pass Data" id="1" localization="8" tooltip="Gets the boarding pass data from the database for the given boarding pass ID" x="206" y="355">
                                                <bitmap>media/images/box/interaction/text_read.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# IN:  user_id
# OUT: user object

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        import os
        import sys
        behaviorPath = self.session().service("ALFrameManager").getBehaviorPath(self.behaviorId)
        self.path = os.path.join(behaviorPath, '../lib')
        if self.path not in sys.path:
            sys.path.insert(0, self.path)

    def onUnload(self):
        #put clean-up code here
        if self.path in sys.path:
            sys.path.remove(self.path)

    def onInput_boarding_pass_id(self, boarding_pass_id):
        from tinydb import TinyDB, Query
        import json
        db = TinyDB(self.getParameter('Database Path'))
        boarding_passes = db.table('boarding_passes')
        BoardingPass = Query()
        boarding_pass_data = boarding_passes.get(BoardingPass.nao_mark_id == int(boarding_pass_id))
        if boarding_pass_data:
          self.boarding_pass_data(json.dumps(boarding_pass_data)) #activate the output of the box
        else:
          self.onError('Error retrieving boarding pass data for boarding pass %d' % boarding_pass_id)

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="boarding_pass_id" type="2" type_size="1" nature="2" inner="0" tooltip="The nao mark ID that identifies the boarding pass." id="2" />
                                                <Output name="boarding_pass_data" type="3" type_size="1" nature="2" inner="0" tooltip="The boarding pass data as a JSON string." id="3" />
                                                <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Ticket could not be found." id="4" />
                                                <Parameter name="Database Path" inherits_from_parent="0" content_type="3" value="/home/nao/airport/db/database.json" default_value="/home/nao/airport/db/database.json" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="Get Next Nao Mark" id="3" localization="8" tooltip="Returns the next available (unallocated) nao mark ID for the given type." x="94" y="244">
                                                <bitmap>media/images/box/interaction/uramark.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        import os
        import sys
        behaviorPath = self.session().service("ALFrameManager").getBehaviorPath(self.behaviorId)
        self.path = os.path.join(behaviorPath, '../lib')
        if self.path not in sys.path:
            sys.path.insert(0, self.path)

    def onUnload(self):
        #put clean-up code here
        if self.path in sys.path:
            sys.path.remove(self.path)

    def onInput_onType(self, nao_mark_type):
        from tinydb import TinyDB, Query
        import json
        db = TinyDB(self.getParameter('Database Path'))
        nao_marks = db.table('nao_marks')
        NaoMark = Query()
        unalloc_nao_marks = nao_marks.search((NaoMark.allocated == False) & (NaoMark.type == nao_mark_type))
        if not unalloc_nao_marks:
            self.onError('Could not obtain an unallocated nao mark')
            return
        next_nao_mark = unalloc_nao_marks[0]
        next_nao_mark['allocated'] = True
        nao_marks.update(next_nao_mark, NaoMark.id == next_nao_mark['id'])
        self.onNextId(next_nao_mark['id'])]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onType" type="3" type_size="1" nature="1" inner="0" tooltip="The type of nao mark you want the next available one for. One of &apos;boarding_pass&apos;, &apos;user&apos;, &apos;ticket&apos;" id="2" />
                                                <Output name="onNextId" type="2" type_size="1" nature="2" inner="0" tooltip="The next available nao mark ID" id="3" />
                                                <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Could not get an unallocated nao mark" id="4" />
                                                <Parameter name="Database Path" inherits_from_parent="0" content_type="3" value="/home/nao/airport/db/database.json" default_value="/home/nao/airport/db/database.json" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="Security Check" id="4" localization="8" tooltip="Given the user data it determines what level of security risk the given user is." x="610" y="170">
                                                <bitmap>media/images/box/tracker/tracker.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[#IN:  user_data
#OUT: GREEN, YELLOW, RED

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onUser(self, user_json):
        import json
        user_data = json.loads(user_json)
        self.logger.warn(user_data)
        if user_data['security_flag'] == 'GREEN':
            self.GREEN()
        elif user_data['security_flag'] == 'YELLOW':
            self.YELLOW()
        elif user_data['security_flag'] == 'RED':
            self.RED()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onUser" type="3" type_size="1" nature="1" inner="0" tooltip="User data as a JSON string." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Output name="RED" type="1" type_size="1" nature="2" inner="0" tooltip="User flagged as RED security risk" id="4" />
                                                <Output name="YELLOW" type="1" type_size="1" nature="2" inner="0" tooltip="User flagged as YELLOW security risk" id="5" />
                                                <Output name="GREEN" type="1" type_size="1" nature="2" inner="0" tooltip="User flagged as GREEN security risk" id="6" />
                                            </Box>
                                            <Box name="Email Boarding Pass" id="9" localization="8" tooltip="Uses an API service to send an email of the created boarding pass." x="573" y="71">
                                                <bitmap>media/images/box/internet/email.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        import os
        import sys
        behaviorPath = self.session().service("ALFrameManager").getBehaviorPath(self.behaviorId)
        self.path = os.path.join(behaviorPath, '../lib')
        if self.path not in sys.path:
            sys.path.insert(0, self.path)

    def onUnload(self):
        #put clean-up code here
        if self.path in sys.path:
            sys.path.remove(self.path)

    def onInput_boarding_pass_data(self, boarding_pass_json):
        from tinydb import TinyDB, Query
        import requests
        import json
#        import os
#        os.environ['no_proxy'] = '127.0.0.1,localhost'
        boarding_pass_data = json.loads(boarding_pass_json)

        db = TinyDB(self.getParameter('Database Path'))
        users = db.table('users')
        User = Query()
        user_data = users.get(User.nao_mark_id == boarding_pass_data['user_id'])

        email_boarding_pass_data = {
            'name': '%s %s' % (user_data['first_name'], user_data['last_name']),
            'email': user_data['email'],
            'nao_mark_id': boarding_pass_data['nao_mark_id'],
            'destination': boarding_pass_data['destination'],
            'departure': boarding_pass_data['departure'],
            'seat': boarding_pass_data['seat'],
            'boarding': boarding_pass_data['boarding'],
            'terminal': 'T1',
            'gate': boarding_pass_data['gate'],
            'boarding_pass_file': boarding_pass_data['boarding_pass_file']
        }
        r = requests.post('%s/email_boarding_pass' % self.getParameter('Airport API Base URI'), json=email_boarding_pass_data)
        if r.status_code == 202:
            self.OK()
        else:
            self.onError('Email boarding pass API call returned: %s' % r.status_code)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="boarding_pass_data" type="3" type_size="1" nature="1" inner="0" tooltip="The boarding pass data as a JSON string." id="2" />
                                                <Output name="OK" type="1" type_size="1" nature="2" inner="0" tooltip="The email was sent" id="3" />
                                                <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="Database Path" inherits_from_parent="0" content_type="3" value="/home/nao/airport/db/database.json" default_value="/home/nao/airport/db/database.json" custom_choice="0" tooltip="" id="5" />
                                                <Parameter name="Airport API Base URI" inherits_from_parent="0" content_type="3" value="http://coreydxc.pythonanywhere.com" default_value="http://coreydxc.pythonanywhere.com" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Ticket Purchase" id="5" localization="8" tooltip="" x="571" y="25">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Create Ticket" id="1" localization="8" tooltip="Generates a ticket which results in an image and saves it in the tickets file location. This can be used to attach in an email." x="236" y="118">
                                                <bitmap>media/images/box/box-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        import os
        import sys
        behaviorPath = self.session().service("ALFrameManager").getBehaviorPath(self.behaviorId)
        self.path = os.path.join(behaviorPath, '../lib')
        if self.path not in sys.path:
            sys.path.insert(0, self.path)

    def onUnload(self):
        #put clean-up code here
        if self.path in sys.path:
            sys.path.remove(self.path)

    def onInput_ticket_data(self, ticket_json):
        from tinydb import TinyDB, Query
        import requests
        import json
#        import os
#        os.environ['no_proxy'] = '127.0.0.1,localhost'
        ticket_data = json.loads(ticket_json)

        if 'ticket_file' in ticket_data:
            self.onError('Ticket already created for ticket id %s' % ticket_data['nao_mark_id'])
            self.ticket_data_out(ticket_json)
            return

        db = TinyDB(self.getParameter('Database Path'))
        tickets = db.table('tickets')
        Ticket = Query()
        users = db.table('users')
        User = Query()
        user_data = users.get(User.nao_mark_id == ticket_data['user_id'])

        new_ticket_data = {
            'name': '%s %s' % (user_data['first_name'], user_data['last_name']),
            'nao_mark_id': ticket_data['nao_mark_id'],
            'destination': ticket_data['destination'],
            'price': '$%s' % ticket_data['price']
        }
        r = requests.post('%s/create_ticket' % self.getParameter('Airport API Base URI'), json=new_ticket_data)
        if r.status_code == requests.codes.ok:
            new_ticket_data = json.loads(r.text)
            ticket_data['ticket_file'] = new_ticket_data['ticket_file']
            tickets.update(ticket_data, Ticket.nao_mark_id == ticket_data['nao_mark_id'])
            self.ticket_data_out(json.dumps(ticket_data))
        else:
            self.onError('Create ticket API call returned: %s' % r.status_code)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="ticket_data" type="3" type_size="1" nature="1" inner="0" tooltip="The ticket data as a JSON string." id="2" />
                                                <Output name="ticket_data_out" type="3" type_size="1" nature="2" inner="0" tooltip="The ticket data as a JSON string." id="3" />
                                                <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="Database Path" inherits_from_parent="0" content_type="3" value="/home/nao/airport/db/database.json" default_value="/home/nao/airport/db/database.json" custom_choice="0" tooltip="" id="5" />
                                                <Parameter name="Airport API Base URI" inherits_from_parent="0" content_type="3" value="http://coreydxc.pythonanywhere.com" default_value="http://coreydxc.pythonanywhere.com" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Email Ticket" id="5" localization="8" tooltip="Uses an API service to send an email of the created ticket." x="285" y="297">
                                                <bitmap>media/images/box/internet/email.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        import os
        import sys
        behaviorPath = self.session().service("ALFrameManager").getBehaviorPath(self.behaviorId)
        self.path = os.path.join(behaviorPath, '../lib')
        if self.path not in sys.path:
            sys.path.insert(0, self.path)

    def onUnload(self):
        #put clean-up code here
        if self.path in sys.path:
            sys.path.remove(self.path)

    def onInput_ticket_data(self, ticket_json):
        from tinydb import TinyDB, Query
        import requests
        import json
        import os
        os.environ['no_proxy'] = '127.0.0.1,localhost'
        ticket_data = json.loads(ticket_json)
        db = TinyDB(self.getParameter('Database Path'))
        users = db.table('users')
        User = Query()
        user_data = users.get(User.nao_mark_id == ticket_data['user_id'])

        email_ticket_data = {
            'name': '%s %s' % (user_data['first_name'], user_data['last_name']),
            'email': user_data['email'],
            'nao_mark_id': ticket_data['nao_mark_id'],
            'destination': ticket_data['destination'],
            'ticket_file': ticket_data['ticket_file']
        }
#        r = requests.post('http://localhost:5000/email_ticket', json=email_ticket_data)
        r = requests.post('%s/email_ticket' % self.getParameter('Airport API Base URI'), json=email_ticket_data)
        if r.status_code == 202:
            self.OK()
        else:
            self.onError('Email ticket API call returned: %s' % r.status_code)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="ticket_data" type="3" type_size="1" nature="1" inner="0" tooltip="The ticket data as a JSON string." id="2" />
                                                <Output name="OK" type="1" type_size="1" nature="2" inner="0" tooltip="The email has been sent." id="3" />
                                                <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="Database Path" inherits_from_parent="0" content_type="3" value="/home/nao/airport/db/database.json" default_value="/home/nao/airport/db/database.json" custom_choice="0" tooltip="" id="5" />
                                                <Parameter name="Airport API Base URI" inherits_from_parent="0" content_type="3" value="http://coreydxc.pythonanywhere.com" default_value="http://coreydxc.pythonanywhere.com" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Purchase Ticket" id="8" localization="8" tooltip="Purchase a ticket." x="446" y="156">
                                                <bitmap>media/images/box/interaction/text_read.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# IN:  user_data, destination
# OUT: ticket_data

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.user_data = ''
        self.destination = ''
        self.ticketNaoMarkId = -1
        self.gotUserData = False
        self.gotDestination = False
        self.gotTicketNaoMarkId = False

    def onLoad(self):
        #put initialization code here
        import os
        import sys
        behaviorPath = self.session().service("ALFrameManager").getBehaviorPath(self.behaviorId)
        self.path = os.path.join(behaviorPath, '../lib')
        if self.path not in sys.path:
            sys.path.insert(0, self.path)

    def onUnload(self):
        #put clean-up code here
        if self.path in sys.path:
            sys.path.remove(self.path)

    def onInput_user_data(self, user_json):
        import json
        self.user_data = json.loads(user_json)
        self.gotUserData = True
        self.purchase_ticket()

    def onInput_destination(self, destination):
        self.destination = destination
        self.gotDestination = True
        self.purchase_ticket()

    def onInput_ticketNaoMarkId(self, ticketNaoMarkId):
        self.ticketNaoMarkId = ticketNaoMarkId
        self.gotTicketNaoMarkId = True
        self.purchase_ticket()

    def purchase_ticket(self):
        from tinydb import TinyDB, Query
        import json
        db = TinyDB(self.getParameter('Database Path'))
        users = db.table('users')
        flights = db.table('flights')
        tickets = db.table('tickets')
        if self.gotUserData and self.gotDestination and self.gotTicketNaoMarkId:
            try:
                self.is_credit_card_declined()
                user_id = self.user_data['nao_mark_id']
                User = Query()
                user = users.get(User.nao_mark_id == int(user_id))
                Flight = Query()
                flight_data = flights.get(Flight.destination == self.destination)
                if flight_data is None:
                    self.onError('Destination %s not found.' % self.destination)
                ticket_data = {
                    'user_id': int(user_id),
                    'flight_id': flight_data.doc_id,
                    'nao_mark_id': self.ticketNaoMarkId,
                    'destination': self.destination,
                    'price': flight_data['ticket_price'] #+10.95
                }
                ticket_id = tickets.insert(ticket_data)
                user['tickets'].append(self.ticketNaoMarkId)
                users.update(user, User.nao_mark_id == int(user_id))
                self.gotUserData = False
                self.gotDestination = False
                self.gotTicketNaoMarkId = False
                self.onPurchase(json.dumps(ticket_data)) #activate the output of the box
            except Exception as e:
                self.deallocateNaoMark(db, self.ticketNaoMarkId)
                self.onError('Ticket purchase failed. %s' % e)

    def is_credit_card_declined(self):
        import random
        n = random.randint(1,5)
        if n == 5:
            self.cc_declined()
            raise(Exception('Credit card was declined'))

    def deallocateNaoMark(self, db, naoMarkId):
        from tinydb import Query
        nao_marks = db.table('nao_marks')
        NaoMark = Query()
        nao_mark = nao_marks.get(NaoMark.id == naoMarkId)
        nao_mark['allocated'] = False
        nao_marks.update(nao_mark, NaoMark.id == nao_mark['id'])]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="user_data" type="3" type_size="1" nature="1" inner="0" tooltip="The user data as a JSON string of who is purchasing the ticket." id="2" />
                                                <Input name="destination" type="3" type_size="1" nature="1" inner="0" tooltip="The name of the destination of the ticket purchase." id="3" />
                                                <Input name="ticketNaoMarkId" type="2" type_size="1" nature="1" inner="0" tooltip="The ID of the next available nao mark for tickets.&#x0A;&#x0A;* USE Get Next Nao Mark box *" id="4" />
                                                <Output name="onPurchase" type="3" type_size="1" nature="2" inner="0" tooltip="The ticket data as a JSON string upon successful ticket purchase." id="5" />
                                                <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="If ticket purchase fails" id="6" />
                                                <Output name="cc_declined" type="1" type_size="1" nature="2" inner="0" tooltip="The user&apos;s credit card was declined" id="7" />
                                                <Parameter name="Database Path" inherits_from_parent="0" content_type="3" value="/home/nao/airport/db/database.json" default_value="/home/nao/airport/db/database.json" custom_choice="0" tooltip="" id="8" />
                                            </Box>
                                            <Box name="Get User" id="6" localization="8" tooltip="Gets the user data from the database for the given user ID" x="108" y="231">
                                                <bitmap>media/images/box/interaction/backlit.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# IN:  user_id
# OUT: user object

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        import os
        import sys
        behaviorPath = self.session().service("ALFrameManager").getBehaviorPath(self.behaviorId)
        self.path = os.path.join(behaviorPath, '../lib')
        if self.path not in sys.path:
            sys.path.insert(0, self.path)

    def onUnload(self):
        #put clean-up code here
        if self.path in sys.path:
            sys.path.remove(self.path)

    def onInput_onUserId(self, user_id):
        import requests
#        import os
#        os.environ['no_proxy'] = '127.0.0.1,localhost'
        r = requests.get('%s/user/%d' % (self.getParameter('Airport API Base URI'), user_id))
        self.logger.info(r.status_code)
        if r.status_code == requests.codes.ok:
            self.onUser(str(r.text))
        elif r.status_code == 400:
            self.onError('User with ID %d could not be found.' % user_id)
        else:
            self.onError('Error retrieving user data for user %d, response code = %d' % (user_id, r.status_code))

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onUserId" type="2" type_size="1" nature="2" inner="0" tooltip="The user ID that identifies the customer." id="2" />
                                                <Output name="onUser" type="3" type_size="1" nature="2" inner="0" tooltip="The user data as a JSON string." id="3" />
                                                <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="User could not be found." id="4" />
                                                <Parameter name="Airport API Base URI" inherits_from_parent="0" content_type="3" value="http://coreydxc.pythonanywhere.com" default_value="http://coreydxc.pythonanywhere.com" custom_choice="0" tooltip="The base URI for the Airport API" id="5" />
                                            </Box>
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Information" id="6" localization="8" tooltip="" x="565" y="142">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Get Ticket Price" id="13" localization="8" tooltip="Get the ticket price for the flight going to the given destination." x="507" y="31">
                                                <bitmap>media/images/box/interaction/text_read.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# IN:  flight_data, destination
# OUT: ticket price

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.flight_data = ''
        self.destination = ''
        self.gotFlightData = False
        self.gotDestination = False

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_flight_data(self, flight_json):
        import json
        self.flight_data = json.loads(flight_json)
        self.gotFlightData = True
        self.get_departure_time()

    def onInput_destination(self, destination):
        self.destination = destination
        self.gotDestination = True
        self.get_departure_time()

    def get_departure_time(self):
        if self.gotFlightData and self.gotDestination:
            destination_data = [x for x in self.flight_data if x['destination'] == self.destination]
            if not destination_data:
                self.not_found('Destination %s could not be found' % self.destination)
            else:
                ticket_price = str(destination_data[0]['ticket_price'])
                self.gotFlightData = False
                self.gotDestination = False
                self.onTicketPrice(ticket_price)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="flight_data" type="3" type_size="1" nature="1" inner="0" tooltip="The flight data as a JSON string." id="2" />
                                                <Input name="destination" type="3" type_size="1" nature="1" inner="0" tooltip="The destination" id="3" />
                                                <Output name="onTicketPrice" type="3" type_size="1" nature="2" inner="0" tooltip="The ticket price for the given destination." id="4" />
                                                <Output name="not_found" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="Get Next Train Departures" id="9" localization="8" tooltip="Gets the next 3 train departures from the airport." x="354" y="278">
                                                <bitmap>media/images/box/internet/internet.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        import os
        import sys
        behaviorPath = self.session().service("ALFrameManager").getBehaviorPath(self.behaviorId)
        self.path = os.path.join(behaviorPath, '../lib')
        if self.path not in sys.path:
            sys.path.insert(0, self.path)

    def onUnload(self):
        #put clean-up code here
        if self.path in sys.path:
            sys.path.remove(self.path)

    def onInput_onStart(self):
#        import os
#        os.environ['no_proxy'] = '127.0.0.1,localhost'import requests
        import requests
        import json
        from datetime import datetime
        now = datetime.now()
        now_date = now.strftime('%Y-%m-%d')
        now_time = now.strftime('%H:%M')
        uri = 'http://transportapi.com/v3/uk/train/station/HXX/%s/%s/timetable.json?app_id=40ab5776&app_key=8c555011a12b0d9c77ac1b17658b8421&destination=PAD' % (now_date, now_time)
        r = requests.get(uri)
       # check result
        self.logger.info(r.status_code)
        if r.status_code == requests.codes.ok:
            train_data = json.loads(r.text)
            self.next_train(str(train_data['departures']['all'][0]['aimed_departure_time']))
            self.second_train(str(train_data['departures']['all'][1]['aimed_departure_time']))
            self.third_train(str(train_data['departures']['all'][2]['aimed_departure_time']))
        else:
            self.onError('Train timetable API call returned: %s' % r.status_code)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="next_train" type="3" type_size="1" nature="2" inner="0" tooltip="The scheduled departure time of the next train from the current time." id="3" />
                                                <Output name="second_train" type="3" type_size="1" nature="2" inner="0" tooltip="The scheduled departure time of the second train from the current time." id="4" />
                                                <Output name="third_train" type="3" type_size="1" nature="2" inner="0" tooltip="The scheduled departure time of the third train from the current time." id="5" />
                                                <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Get Weather" id="8" localization="8" tooltip="Gets the current temperature, humidity, wind speed and wind direction for the given destination.&#x0A;&#x0A;Uses https://openweathermap.org/current" x="357" y="148">
                                                <bitmap>media/images/box/internet/weather.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        import os
        import sys
        behaviorPath = self.session().service("ALFrameManager").getBehaviorPath(self.behaviorId)
        self.path = os.path.join(behaviorPath, '../lib')
        if self.path not in sys.path:
            sys.path.insert(0, self.path)

    def onUnload(self):
        #put clean-up code here
        if self.path in sys.path:
            sys.path.remove(self.path)

    def onInput_destination(self, destination):
#        import os
#        os.environ['no_proxy'] = '127.0.0.1,localhost'import requests
        import requests
        import json
        current_weather_uri = 'http://api.openweathermap.org/data/2.5/weather?q=%s,au&appid=465a7c9eca36bddce8084bf1eef81d69&units=metric' %  destination.strip()
        current_weather_r = requests.get(current_weather_uri)
       # check result
        self.logger.info(current_weather_r.status_code)
        if current_weather_r.status_code == requests.codes.ok:
            current_weather_data = json.loads(current_weather_r.text)
            self.logger.info(current_weather_data)
            self.current_temp(current_weather_data['main']['temp'])
            self.humidity(current_weather_data['main']['humidity'])
            self.wind_speed(current_weather_data['wind']['speed'])
            self.wind_direction(current_weather_data['wind']['deg'])
        else:
            self.onError('Current weather API call returned: %s' % current_weather_r.status_code)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="destination" type="3" type_size="1" nature="1" inner="0" tooltip="The destination to get the weather for" id="2" />
                                                <Output name="current_temp" type="2" type_size="1" nature="2" inner="0" tooltip="The current temperature in degrees celsius for the given destination." id="3" />
                                                <Output name="humidity" type="2" type_size="1" nature="2" inner="0" tooltip="The current humidity in % for the given destination." id="4" />
                                                <Output name="wind_speed" type="2" type_size="1" nature="2" inner="0" tooltip="The current wind speed in metres/sec for the given destination." id="5" />
                                                <Output name="wind_direction" type="2" type_size="1" nature="2" inner="0" tooltip="The current wind direction in degrees (meteorological) for the given destination." id="6" />
                                                <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                            </Box>
                                            <Box name="Log Output" id="1" localization="8" tooltip="" x="818" y="306">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="INFO" type="0" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                <Input name="ERROR" type="3" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Get Flights" id="2" localization="8" tooltip="Get the flight data from the database" x="349" y="41">
                                                <bitmap>media/images/box/sensors/ultrasound.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# IN:  NONE
# OUT: flight object list (json)

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        import os
        import sys
        behaviorPath = self.session().service("ALFrameManager").getBehaviorPath(self.behaviorId)
        self.path = os.path.join(behaviorPath, '../lib')
        if self.path not in sys.path:
            sys.path.insert(0, self.path)

    def onUnload(self):
        #put clean-up code here
        if self.path in sys.path:
            sys.path.remove(self.path)

    def onInput_onStart(self):
        from tinydb import TinyDB
        import json
        db = TinyDB(self.getParameter('Database Path'))
        flights = db.table('flights')
        flight_data = flights.all()
        self.logger.info(flight_data)
        if flight_data:
            self.onFlights(json.dumps(flight_data)) #activate the output of the box
        else:
            self.onError('Error retrieving flight data')

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onFlights" type="3" type_size="1" nature="2" inner="0" tooltip="The flight data in a JSON string." id="3" />
                                                <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="Database Path" inherits_from_parent="0" content_type="3" value="/home/nao/airport/db/database.json" default_value="/home/nao/airport/db/database.json" custom_choice="0" tooltip="The location of the database" id="5" />
                                            </Box>
                                            <Link inputowner="13" indexofinput="2" outputowner="2" indexofoutput="3" />
                                            <Link inputowner="1" indexofinput="3" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="3" outputowner="13" indexofoutput="5" />
                                            <Link inputowner="1" indexofinput="3" outputowner="8" indexofoutput="7" />
                                            <Link inputowner="1" indexofinput="3" outputowner="9" indexofoutput="6" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
